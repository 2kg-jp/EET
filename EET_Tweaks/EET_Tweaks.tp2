BACKUP ~EET_Tweaks/backup~
AUTHOR ~K4thos (swit)~
VERSION ~beta 0.1~
README ~EET_Tweaks/docs/[%LANGUAGE%]readme.htm~ ~EET_Tweaks/docs/[en_US]readme.htm~
//ASK_EVERY_COMPONENT
//AUTO_TRA ~EET_Tweaks/lang/%s~//%~

ALWAYS
	INCLUDE ~EET_Tweaks/lib/always.tph~
END

LANGUAGE ~English~
	~en_US~
	~EET_Tweaks/lang/en_US/prompts.tra~
	~EET_Tweaks/lang/en_US/setup.tra~
LANGUAGE ~Polski (Polish)~
	~pl_PL~
	~EET_Tweaks/lang/pl_PL/prompts.tra~
	~EET_Tweaks/lang/pl_PL/setup.tra~

/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////                                                  \\\\\
///// Teleport spell                                   \\\\\
/////                                                  \\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\

BEGIN ~Teleport spell~
//DESIGNATED 0
REQUIRE_PREDICATE GAME_IS ~eet~ ~This component is not compatible with your game.~

LOAD_TRA ~EET_Tweaks/lang/%LANGUAGE%/0.tra~

COMPILE ~EET_Tweaks/0/K#TELSPL.d~

//modify both scripts and dialogue
<<<<<<<< EET_Tweaks-inlined/0/K#TELCUT.baf
IF
  True()
THEN
  RESPONSE #100
    CutSceneId(Player1)
    CreateVisualEffectObject("SPDIMNDR",Player1)
    CreateVisualEffectObject("SPDIMNDR",Player2)
    CreateVisualEffectObject("SPDIMNDR",Player3)
    CreateVisualEffectObject("SPDIMNDR",Player4)
    CreateVisualEffectObject("SPDIMNDR",Player5)
    CreateVisualEffectObject("SPDIMNDR",Player6)
    Wait(3)
    FadeToColor([20.0],0)
    Wait(1)
    LeaveAreaLUAPanic("%area%","",[%Xcoordinate%.%Ycoordinate%],%Orientation%)
    LeaveAreaLUA("%area%","",[%Xcoordinate%.%Ycoordinate%],%Orientation%)
    ActionOverride(Player2,LeaveAreaLUA("%area%","",[%Xcoordinate%.%Ycoordinate%],%Orientation%))
    ActionOverride(Player3,LeaveAreaLUA("%area%","",[%Xcoordinate%.%Ycoordinate%],%Orientation%))
    ActionOverride(Player4,LeaveAreaLUA("%area%","",[%Xcoordinate%.%Ycoordinate%],%Orientation%))
    ActionOverride(Player5,LeaveAreaLUA("%area%","",[%Xcoordinate%.%Ycoordinate%],%Orientation%))
    ActionOverride(Player6,LeaveAreaLUA("%area%","",[%Xcoordinate%.%Ycoordinate%],%Orientation%))
    MultiPlayerSync()
    Wait(1)
    FadeFromColor([20.0],0)
    CreateVisualEffectObject("SPDIMNDR",Myself)
    ActionOverride(Player2,CreateVisualEffectObject("SPDIMNDR",Myself))
    ActionOverride(Player3,CreateVisualEffectObject("SPDIMNDR",Myself))
    ActionOverride(Player4,CreateVisualEffectObject("SPDIMNDR",Myself))
    ActionOverride(Player5,CreateVisualEffectObject("SPDIMNDR",Myself))
    ActionOverride(Player6,CreateVisualEffectObject("SPDIMNDR",Myself))
    Wait(3)
    EndCutSceneMode()
END
>>>>>>>>

<<<<<<<< EET_Tweaks-inlined/0/area-et.baf
IF
  Global("K#BeenIn%area%","GLOBAL",0)
  //AreaCheck("%area%")
THEN
  RESPONSE #100
    SetGlobal("K#BeenIn%area%","GLOBAL",1)
    Continue()
END
>>>>>>>>

<<<<<<<< EET_Tweaks-inlined/0/K#TELSPL-eb.d
EXTEND_BOTTOM K#TELSPL 0
	IF ~OR(2) Global("K#BeenIn%area%","GLOBAL",1) Global("K#DebugMode","GLOBAL",1)~ THEN REPLY ~%string%~ DO ~ClearAllActions()
StartCutScene("K#%area%")
DestroySelf()~ EXIT
END
>>>>>>>>

COPY - ~EET_Tweaks/0/EET-teleport.tbl~ ~EET_Tweaks/0/EET-teleport.tbl~
	COUNT_2DA_ROWS 4 cntrow
	FOR (cnt = 1; cnt < "%cntrow%"; cnt = cnt + 1) BEGIN
		SET update = 0
		READ_2DA_ENTRY cnt 0 4 "area"
		READ_2DA_ENTRY cnt 1 4 "Xcoordinate"
		READ_2DA_ENTRY cnt 2 4 "Ycoordinate"
		READ_2DA_ENTRY cnt 3 4 "Orientation"
		INNER_ACTION BEGIN
			ACTION_IF (("%area%" STRING_EQUAL_CASE "%area_last%")=0) BEGIN
				EXTEND_TOP ~%area%.BCS~ ~EET_Tweaks-inlined/0/area-et.baf~ EVALUATE_BUFFER
				COPY - ~EET_Tweaks-inlined/0/K#TELCUT.baf~ ~EET_Tweaks-inlined/0/K#%area%.baf~
				COMPILE ~EET_Tweaks-inlined/0/K#%area%.baf~ EVALUATE_BUFFER
				COPY - ~%tra_path%/%LANGUAGE%/areas.tra~ ~%tra_path%/%LANGUAGE%/areas.tra~
					REPLACE_TEXTUALLY ~%slash%%slash%.*~ ~~
					COUNT_2DA_ROWS 3 cntrow2
					FOR (cnt2 = 0; cnt2 < "%cntrow2%"; cnt2 = cnt2 + 1) BEGIN
						READ_2DA_ENTRY cnt2 0 3 "compareWith"
						READ_2DA_ENTRY cnt2 2 3 "string"
						PATCH_IF (("@%area%" STRING_EQUAL_CASE "%compareWith%")=1) BEGIN
							INNER_PATCH_SAVE string "%string%" BEGIN
								REPLACE_TEXTUALLY "###" " "
								REPLACE_TEXTUALLY ~"~ ~~ //"
								REPLACE_TEXTUALLY "~" ""
							END
							SET update = 1
							SET cnt2 = cntrow2
						END
					END
				ACTION_IF ("%update%" = 1) BEGIN 
					COMPILE ~EET_Tweaks-inlined/0/K#TELSPL-eb.d~ EVALUATE_BUFFER
				END ELSE BEGIN
					WARN ~Translation for %area% used in K#TELSPL.DLG not found.~
				END
			END
		END
		SPRINT ~area_last~ ~%area%~
	END

COPY ~EET_Tweaks/0/K#TELSPL.SPL~ ~override~
	SAY 0x8 @2000000
	SAY 0x50 @2000001

COPY ~EET_Tweaks/0/K#TELSPL.ITM~ ~override~
	SAY 0xc @2000000
	SAY 0x54 @2000001

/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////                                                  \\\\\
///// Consistent NPC appearance                        \\\\\
/////                                                  \\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\

BEGIN ~Consistent NPC appearance~
//DESIGNATED 1
REQUIRE_PREDICATE GAME_IS ~eet~ ~This component is not compatible with your game.~

OUTER_SET valid_answer = 0
OUTER_SET button = 0

OUTER_WHILE (valid_answer = 0) BEGIN
	ACTION_IF ("%ARGS_component%" = "%COMPONENT_NUMBER%") BEGIN
		OUTER_SET option = "%ARGS_value%"
		OUTER_SET valid_answer = 1
	END ELSE ACTION_IF ("%button%" = 1) BEGIN //BG:EE
		OUTER_SET option = 0
		OUTER_SET valid_answer = 1
	END ELSE ACTION_IF ("%button%" = 2) BEGIN //BG2:EE
		OUTER_SET option = 1
		OUTER_SET valid_answer = 1
	END ELSE BEGIN
		PRINT ~Which game should be used as a portraits and colours base for NPCs that are joinable in both BG:EE and BG2:EE?
 1] BG:EE
 2] BG2:EE~
		ACTION_READLN ~button~
		ACTION_IF NOT (IS_AN_INT %button%) BEGIN
			OUTER_SET button = 0
		END
	END
END

INCLUDE ~EET_TWEAKS/lib/1.tph~

/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////                                                  \\\\\
///// Consistent NPC voices                            \\\\\
/////                                                  \\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\

BEGIN ~Consistent NPC voices~
//DESIGNATED 2
REQUIRE_PREDICATE GAME_IS ~eet~ ~This component is not compatible with your game.~
REQUIRE_PREDICATE ("%LANGUAGE%" STRING_EQUAL_CASE ~pl_PL~) ~This component is only for Polish language (unless someone will suggest changes for other languages in future).~

LOAD_TRA ~EET_Tweaks/lang/%LANGUAGE%/2.tra~

INCLUDE ~EET_TWEAKS/lib/2_%LANGUAGE%.tph~ //no point in bloating the main file, especially if there will be more languages added in future

/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////                                                  \\\\\
///// Additional BG2:EE SoA XP CAP                     \\\\\
/////                                                  \\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\

BEGIN ~Additional BG2:SoA XP CAP~
//DESIGNATED 3
REQUIRE_PREDICATE GAME_IS ~eet~ ~This component is not compatible with your game.~

OUTER_SET valid_answer = 0
OUTER_SET button = 0
OUTER_SPRINT value ~dummy~

OUTER_WHILE (valid_answer = 0) BEGIN
	ACTION_IF ("%ARGS_component%" = "%COMPONENT_NUMBER%") BEGIN
		OUTER_SET value = "%ARGS_value%"
		OUTER_SET valid_answer = 1
	END ELSE ACTION_IF ("%button%" = 1) BEGIN //2,500,000
		OUTER_SET value = 2500000
		OUTER_SET valid_answer = 1
	END ELSE ACTION_IF ("%button%" = 2) BEGIN //2,950,000
		OUTER_SET value = 2950000
		OUTER_SET valid_answer = 1
	END ELSE ACTION_IF ("%button%" = 3) BEGIN //Custom value
		OUTER_WHILE NOT (IS_AN_INT %value%) OR (%value% < 1) BEGIN
			PRINT ~Type in the integer value for XP CAP:~
			ACTION_READLN ~value~
		END
		OUTER_SET valid_answer = 1
	END ELSE BEGIN
		PRINT ~What value should be used for BG2:EE SoA XP CAP?
 1] 2,500,000 - BG2:ToB starting XP for NPC
 2] 2,950,000 - BG2 without expansion XP CAP
 3] Custom value~
		ACTION_READLN ~button~
		ACTION_IF NOT (IS_AN_INT %button%) BEGIN
			OUTER_SET button = 0
		END
	END
END

<<<<<<<< EET_Tweaks-inlined/6/baldur-eb.baf
IF
  GlobalLT("ENDOFBG2","GLOBAL",2)
  XPGT(Player%number%,%value%)
  !AreaCheck("OH8000")
  !AreaCheck("OH9310")
  Global("OHB_BP2_CAPTURE","GLOBAL",0)
  Global("BPINTRO","GLOBAL",0)
THEN
  RESPONSE #100
    ChangeStat(Player%number%,XP,%value%,SET)
    Continue()
END
>>>>>>>>

ACTION_FOR_EACH number IN 1 2 3 4 5 6 BEGIN
	EXTEND_BOTTOM ~BALDUR.BCS~ ~EET_Tweaks-inlined/6/baldur-eb.baf~ EVALUATE_BUFFER
END

PRINT ~XP CAP set to %value%~

/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////                                                  \\\\\
///// Adjust BG:EE XP CAP                              \\\\\
/////                                                  \\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\

BEGIN ~Adjust BG:EE XP CAP~
//DESIGNATED 4
REQUIRE_PREDICATE GAME_IS ~eet~ ~This component is not compatible with your game.~

OUTER_SET valid_answer = 0
OUTER_SET button = 0
OUTER_SPRINT value ~dummy~

OUTER_WHILE (valid_answer = 0) BEGIN
	ACTION_IF ("%ARGS_component%" = "%COMPONENT_NUMBER%") BEGIN
		OUTER_SET value = "%ARGS_value%"
		OUTER_SET valid_answer = 1
	END ELSE ACTION_IF ("%button%" = 1) BEGIN //89,000
		OUTER_SET value = 89000
		OUTER_SET valid_answer = 1
	END ELSE ACTION_IF ("%button%" = 2) BEGIN //161,000
		OUTER_SET value = 161000
		OUTER_SET valid_answer = 1
	END ELSE ACTION_IF ("%button%" = 3) BEGIN //Custom value
		OUTER_WHILE NOT (IS_AN_INT %value%) OR (%value% < 1) BEGIN
			PRINT ~Type in the integer value for XP CAP:~
			ACTION_READLN ~value~
		END
		OUTER_SET valid_answer = 1
	END ELSE ACTION_IF ("%button%" = 4) BEGIN //Disable
		OUTER_SET value = 100000000
		OUTER_SET valid_answer = 1
	END ELSE BEGIN
		PRINT ~What value should be used for BG:EE XP CAP?
 1]  89,000 - BG2:EE starting XP
 2] 161,000 - BG:EE XP CAP (default)
 3] Custom value
 4] Disable XP CAP (set to 100,000,000)~
		ACTION_READLN ~button~
		ACTION_IF NOT (IS_AN_INT %button%) BEGIN
			OUTER_SET button = 0
		END
	END
END

COPY_EXISTING ~BALDUR.BCS~ ~override~
	DECOMPILE_AND_PATCH BEGIN
		PATCH_FOR_EACH number IN 1 2 3 4 5 6 BEGIN
			SPRINT textToReplace ~GlobalLT("ENDOFBG1","GLOBAL",2)[%newline%]*XPGT(Player%number%,[0-9]+)[%newline%]*!AreaCheck("OH8000")[%newline%]*!AreaCheck("OH9310")[%newline%]*Global("OHB_BP2_CAPTURE","GLOBAL",0)[%newline%]*Global("BPINTRO","GLOBAL",0)[%newline%]*THEN[%newline%]*RESPONSE #100[%newline%]*ChangeStat(Player%number%,XP,[0-9]+,SET)~
			COUNT_REGEXP_INSTANCES ~%textToReplace%~ num_matches
			PATCH_IF (num_matches > 0) BEGIN
				REPLACE_TEXTUALLY ~%textToReplace%~ ~GlobalLT("ENDOFBG1","GLOBAL",2)
  XPGT(Player%number%,%value%)
  !AreaCheck("OH8000")
  !AreaCheck("OH9310")
  Global("OHB_BP2_CAPTURE","GLOBAL",0)
  Global("BPINTRO","GLOBAL",0)
THEN
  RESPONSE #100
    ChangeStat(Player%number%,XP,%value%,SET)~
			END ELSE BEGIN
				PATCH_WARN ~Warning: could not find EET XP CAP data in %SOURCE_FILESPEC%~
			END
		END
	END
BUT_ONLY

PRINT ~XP CAP set to %value%~

/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////                                                  \\\\\
///// Adjust BG2:EE XP CAP                             \\\\\
/////                                                  \\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\

BEGIN ~Adjust BG2:EE XP CAP~
//DESIGNATED 5
REQUIRE_PREDICATE GAME_IS ~eet~ ~This component is not compatible with your game.~

OUTER_SET valid_answer = 0
OUTER_SET button = 0
OUTER_SPRINT value ~dummy~

OUTER_WHILE (valid_answer = 0) BEGIN
	ACTION_IF ("%ARGS_component%" = "%COMPONENT_NUMBER%") BEGIN
		OUTER_SET value = "%ARGS_value%"
		OUTER_SET valid_answer = 1
	END ELSE ACTION_IF ("%button%" = 1) BEGIN //2,950,000
		OUTER_SET value = 2950000
		OUTER_SET valid_answer = 1
	END ELSE ACTION_IF ("%button%" = 2) BEGIN //8,000,000
		OUTER_SET value = 8000000
		OUTER_SET valid_answer = 1
	END ELSE ACTION_IF ("%button%" = 3) BEGIN //Custom value
		OUTER_WHILE NOT (IS_AN_INT %value%) OR (%value% < 10) BEGIN
			PRINT ~Type in the integer value for XP CAP:~
			ACTION_READLN ~value~
		END
		OUTER_SET valid_answer = 1
	END ELSE ACTION_IF ("%button%" = 4) BEGIN //Disable
		OUTER_SET value = "-1"
		OUTER_SET valid_answer = 1
	END ELSE BEGIN
		PRINT ~What value should be used for BG2:EE SoA XP CAP?
 1] 2,950,000 - BG2 without expansion XP CAP
 2] 8,000,000 - BG2:EE XP CAP (default)
 3] Custom value
 4] Disable XP CAP~
		ACTION_READLN ~button~
		ACTION_IF NOT (IS_AN_INT %button%) BEGIN
			OUTER_SET button = 0
		END
	END
END

COPY_EXISTING ~XPCAP.2DA~ ~override~
	REPLACE_TEXTUALLY ~[1-9][0-9]+~ ~%value%~ EVALUATE_BUFFER //numbers >=10 only, otherwise, it changes 2DA as well
	BUT_ONLY
COPY_EXISTING ~STARTARE.2DA~ ~override~
	REPLACE_TEXTUALLY ~START_XP_CAP[ 	]+[-0-9]+~ ~%value%~ EVALUATE_BUFFER
	BUT_ONLY

ACTION_IF ("%value%" < 0) BEGIN
	PRINT ~XP CAP has been disabled~
END ELSE BEGIN
	PRINT ~XP CAP set to %value%~
END

/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////                                                  \\\\\
///// Adjust XP for Traps, Spells and Lockpicking      \\\\\
/////                                                  \\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\

BEGIN ~Adjust XP for Traps, Spells and Lockpicking~
//DESIGNATED 6
REQUIRE_PREDICATE GAME_IS ~soa tob tutu tutu_totsc bgt ca iwd_in_bg2 bgee bg2ee iwdee eet~ ~This component is not compatible with your game.~

OUTER_SET valid_answer = 0
OUTER_SET button = 0
OUTER_SPRINT value ~dummy~

OUTER_WHILE (valid_answer = 0) BEGIN
	ACTION_IF ("%ARGS_component%" = "%COMPONENT_NUMBER%") BEGIN
		OUTER_SET value = "%ARGS_value%"
		OUTER_SET valid_answer = 1
	END ELSE ACTION_IF ("%button%" = 1) BEGIN //150%
		OUTER_SET value = 150
		OUTER_SET valid_answer = 1
	END ELSE ACTION_IF ("%button%" = 2) BEGIN //75%
		OUTER_SET value = 75
		OUTER_SET valid_answer = 1
	END ELSE ACTION_IF ("%button%" = 3) BEGIN //50%
		OUTER_SET value = 50
		OUTER_SET valid_answer = 1
	END ELSE ACTION_IF ("%button%" = 4) BEGIN //25%
		OUTER_SET value = 25
		OUTER_SET valid_answer = 1
	END ELSE ACTION_IF ("%button%" = 5) BEGIN //10%
		OUTER_SET value = 10
		OUTER_SET valid_answer = 1
	END ELSE ACTION_IF ("%button%" = 6) BEGIN //0%
		OUTER_SET value = 0
		OUTER_SET valid_answer = 1
	END ELSE ACTION_IF ("%button%" = 7) BEGIN //Custom value
		OUTER_WHILE NOT (IS_AN_INT %value%) OR (%value% < 0) BEGIN
			PRINT ~Type in the integer percentage value:~
			ACTION_READLN ~value~
		END
		OUTER_SET valid_answer = 1
	END ELSE ACTION_IF ("%button%" = 8) BEGIN //BG1 (default)
		OUTER_SPRINT DISARM_TRAP ~DISARM_TRAP   10   10   10   10   10   17   17   17   17   17   27   27   27   27   27   32   32   32   32   32   32   32   32   32   32   32   32   32   32   32   32   32   32   32   32   32   32   32   32   32~
		OUTER_SPRINT PICK_LOCK   ~PICK_LOCK     25   25   25   25   25   40   40   40   40   40   95   95   95   95   95   15   15   15   15   15   15   15   15   15   15   15   15   15   15   15   15   15   15   15   15   15   15   15   15   15~
		OUTER_SPRINT LEARN_SPELL ~LEARN_SPELL   10   20   30   40   50   60   70   80   90   0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0~
		OUTER_SET valid_answer = 1
	END ELSE ACTION_IF ("%button%" = 9) BEGIN //BG2
		OUTER_SPRINT DISARM_TRAP ~DISARM_TRAP   1000 1000 1000 1000 1000 1750 1750 1750 1750 1750 2750 2750 2750 2750 2750 3250 3250 3250 3250 3250 3250 3250 3250 3250 3250 3250 3250 3250 3250 3250 3250 3250 3250 3250 3250 3250 3250 3250 3250 3250~
		OUTER_SPRINT PICK_LOCK   ~PICK_LOCK     250  250  250  250  250  400  400  400  400  400  950  950  950  950  950  1550 1550 1550 1550 1550 1550 1550 1550 1550 1550 1550 1550 1550 1550 1550 1550 1550 1550 1550 1550 1550 1550 1550 1550 1550~
		OUTER_SPRINT LEARN_SPELL ~LEARN_SPELL   1000 2000 3000 4000 5000 6000 7000 8000 9000 0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0~
		OUTER_SET valid_answer = 1
	END ELSE BEGIN
		PRINT ~How would you like to do adjust XP for Disarming Traps, Lockpicking and Spell learning?
 1] Increase to 150%
 2] Decrease to 75%
 3] Decrease to 50%
 4] Decrease to 25%
 5] Decrease to 10%
 6] Disable XP for disarming traps, lockpicking, spell learning
 7] Custom value
 8] Use XP values from BG1:EE (default)
 9] Use XP values from BG2:EE~//%~
		ACTION_READLN ~button~
		ACTION_IF NOT (IS_AN_INT %button%) BEGIN
			OUTER_SET button = 0
		END
	END
END

COPY_EXISTING ~XPBONUS.2DA~ ~override~
	PATCH_IF ("%button%" <= 7) BEGIN
		COUNT_2DA_COLS "cntcol"
		COUNT_2DA_ROWS "%cntcol%" "cntrows"
		FOR (cnt = 0; cnt < "%cntrows%"; cnt = cnt + 1) BEGIN
			FOR (cnt2 = 1; cnt2 < "%cntcol%"; cnt2 = cnt2 + 1) BEGIN
				READ_2DA_ENTRY cnt cnt2 "%cntcol%" "XP_value"
				PATCH_IF ("%XP_value%" > 0) BEGIN
					SET XP_value = ("%XP_value%" * "%value%" / 100)
					PATCH_IF ("%XP_value%" < 1) BEGIN
						SET XP_value = 1
					END
					SET_2DA_ENTRY cnt cnt2 cntcol ~%XP_value%~
				END
			END
		END
	END ELSE BEGIN
		REPLACE_TEXTUALLY ~DISARM_TRAP.+$~ ~%DISARM_TRAP%~
		REPLACE_TEXTUALLY ~PICK_LOCK.+$~   ~%PICK_LOCK%~
		REPLACE_TEXTUALLY ~LEARN_SPELL.+$~ ~%LEARN_SPELL%~
	END
	PRETTY_PRINT_2DA
BUT_ONLY

/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////                                                  \\\\\
///// Adjust XP for killing creatures                  \\\\\
/////                                                  \\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\

BEGIN ~Adjust XP for killing creatures~
//DESIGNATED 7
REQUIRE_PREDICATE GAME_IS ~soa tob tutu tutu_totsc bgt ca iwd_in_bg2 bgee bg2ee iwdee eet~ ~This component is not compatible with your game.~

OUTER_SET valid_answer = 0
OUTER_SET button = 0
OUTER_SPRINT value ~dummy~

OUTER_WHILE (valid_answer = 0) BEGIN
	ACTION_IF ("%ARGS_component%" = "%COMPONENT_NUMBER%") BEGIN
		OUTER_SET value = "%ARGS_value%"
		OUTER_SET valid_answer = 1
	END ELSE ACTION_IF ("%button%" = 1) BEGIN //150%
		OUTER_SET value = 150
		OUTER_SET valid_answer = 1
	END ELSE ACTION_IF ("%button%" = 2) BEGIN //75%
		OUTER_SET value = 75
		OUTER_SET valid_answer = 1
	END ELSE ACTION_IF ("%button%" = 3) BEGIN //50%
		OUTER_SET value = 50
		OUTER_SET valid_answer = 1
	END ELSE ACTION_IF ("%button%" = 4) BEGIN //25%
		OUTER_SET value = 25
		OUTER_SET valid_answer = 1
	END ELSE ACTION_IF ("%button%" = 5) BEGIN //10%
		OUTER_SET value = 10
		OUTER_SET valid_answer = 1
	END ELSE ACTION_IF ("%button%" = 6) BEGIN //0%
		OUTER_SET value = 0
		OUTER_SET valid_answer = 1
	END ELSE ACTION_IF ("%button%" = 7) BEGIN //Custom value
		OUTER_WHILE NOT (IS_AN_INT %value%) OR (%value% < 0) BEGIN
			PRINT ~Type in the integer percentage value:~
			ACTION_READLN ~value~
		END
		OUTER_SET valid_answer = 1
	END ELSE BEGIN
		PRINT ~Adjust XP for killing creatures:
 1] Increase to 150%
 2] Decrease to 75%
 3] Decrease to 50%
 4] Decrease to 25%
 5] Decrease to 10%
 6] Disable XP for killing creatures
 7] Custom value~//%~
		ACTION_READLN ~button~
		ACTION_IF NOT (IS_AN_INT %button%) BEGIN
			OUTER_SET button = 0
		END
	END
END

COPY_EXISTING_REGEXP GLOB ~.+\.CRE~ ~override~
	READ_LONG 0x14 "XP_value"
	PATCH_IF ("%XP_value%" > 0) BEGIN
		SET print = "%XP_value%"
		PATCH_IF ("%value%" > 0) BEGIN
			SET XP_value = ("%XP_value%" * "%value%" / 100)
			PATCH_IF ("%XP_value%" < 1) BEGIN
				SET XP_value = 1
			END
			WRITE_LONG 0x14 "%XP_value%"
			PATCH_PRINT ~Patching %SOURCE_FILE%: %print% => %XP_value%~
		END ELSE BEGIN
			WRITE_LONG 0x14 0
			PATCH_PRINT ~Patching %SOURCE_FILE%: %print% => 0~
		END
	END
BUT_ONLY

/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////                                                  \\\\\
///// Adjust XP for quests                             \\\\\
/////                                                  \\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\

BEGIN ~Adjust XP for quests~
//DESIGNATED 8
REQUIRE_PREDICATE GAME_IS ~soa tob tutu tutu_totsc bgt ca iwd_in_bg2 bgee bg2ee iwdee eet~ ~This component is not compatible with your game.~

OUTER_SET valid_answer = 0
OUTER_SET button = 0
OUTER_SPRINT value ~dummy~

OUTER_WHILE (valid_answer = 0) BEGIN
	ACTION_IF ("%ARGS_component%" = "%COMPONENT_NUMBER%") BEGIN
		OUTER_SET value = "%ARGS_value%"
		OUTER_SET valid_answer = 1
	END ELSE ACTION_IF ("%button%" = 1) BEGIN //150%
		OUTER_SET value = 150
		OUTER_SET valid_answer = 1
	END ELSE ACTION_IF ("%button%" = 2) BEGIN //75%
		OUTER_SET value = 75
		OUTER_SET valid_answer = 1
	END ELSE ACTION_IF ("%button%" = 3) BEGIN //50%
		OUTER_SET value = 50
		OUTER_SET valid_answer = 1
	END ELSE ACTION_IF ("%button%" = 4) BEGIN //25%
		OUTER_SET value = 25
		OUTER_SET valid_answer = 1
	END ELSE ACTION_IF ("%button%" = 5) BEGIN //10%
		OUTER_SET value = 10
		OUTER_SET valid_answer = 1
	END ELSE ACTION_IF ("%button%" = 6) BEGIN //0%
		OUTER_SET value = 0
		OUTER_SET valid_answer = 1
	END ELSE ACTION_IF ("%button%" = 7) BEGIN //Custom value
		OUTER_WHILE NOT (IS_AN_INT %value%) OR (%value% < 0) BEGIN
			PRINT ~Type in the integer percentage value:~
			ACTION_READLN ~value~
		END
		OUTER_SET valid_answer = 1
	END ELSE BEGIN
		PRINT ~Adjust XP for quests:
 1] Increase to 150%
 2] Decrease to 75%
 3] Decrease to 50%
 4] Decrease to 25%
 5] Decrease to 10%
 6] Disable XP for quests
 7] Custom value~//%~
		ACTION_READLN ~button~
		ACTION_IF NOT (IS_AN_INT %button%) BEGIN
			OUTER_SET button = 0
		END
	END
END

COPY_EXISTING ~XPLIST.2da~ ~override~
	COUNT_2DA_COLS "cntcol"
	COUNT_2DA_ROWS "%cntcol%" "cntrows"
	FOR (cnt = 0; cnt < "%cntrows%"; cnt = cnt + 1) BEGIN
		READ_2DA_ENTRY cnt 0 "%cntcol%" "name"
		PATCH_PRINT ~Analysing '%name%' XPLIST.2da row~
		FOR (cnt2 = 2; cnt2 < "%cntcol%"; cnt2 = cnt2 + 1) BEGIN
			READ_2DA_ENTRY cnt cnt2 "%cntcol%" "XP_value"
			SET add_prefix = 0
			SPRINT print "%XP_value%"
			PATCH_IF NOT (IS_AN_INT %XP_value%) BEGIN
				INNER_PATCH_SAVE ~XP_value~ ~%XP_value%~ BEGIN
					REPLACE_TEXTUALLY ~P_~ ~~
				END
				SET add_prefix = 1
			END
			PATCH_IF ("%XP_value%" > 0) BEGIN
				SET XP_value = ("%XP_value%" * "%value%" / 100)
				PATCH_IF ("%XP_value%" < 1) BEGIN
					SET XP_value = 1
				END
				PATCH_IF ("%add_prefix%" = 1) BEGIN
					INNER_PATCH_SAVE ~XP_value~ ~%XP_value%~ BEGIN
						REPLACE_TEXTUALLY ~^~ ~P_~
					END
				END
				SET_2DA_ENTRY cnt cnt2 cntcol ~%XP_value%~
				PATCH_PRINT ~Patching XPLIST.2da (row%cnt%, col%cnt2%): %print% => %XP_value%~
			END
		END
	END
	PRETTY_PRINT_2DA
BUT_ONLY

ACTION_FOR_EACH ext IN BCS DLG BEGIN
	COPY_EXISTING_REGEXP GLOB ~.+\.%ext%~ ~override~
		DECOMPILE_AND_PATCH BEGIN
			REPLACE_EVALUATE ~AddexperienceParty(\([1-9][0-9]*\))~ BEGIN
				SET "XP_value" = "%MATCH1%"
				PATCH_IF ("%XP_value%" > 0) BEGIN
					SET XP_value = ("%XP_value%" * "%value%" / 100)
					PATCH_IF ("%XP_value%" < 1) BEGIN
						SET XP_value = 1
					END
					PATCH_PRINT ~Patching %SOURCE_FILE%: %MATCH1% => %XP_value%~
				END
			END
			~AddexperienceParty(%XP_value%)~
			REPLACE_EVALUATE ~AddXPObject(\(.*\),\([1-9][0-9]*\))~ BEGIN
				SET "XP_value" = "%MATCH2%"
				PATCH_IF ("%XP_value%" > 0) BEGIN
					SET XP_value = ("%XP_value%" * "%value%" / 100)
					PATCH_IF ("%XP_value%" < 1) BEGIN
						SET XP_value = 1
					END
					PATCH_PRINT ~Patching %SOURCE_FILE%: %MATCH2% => %XP_value%~
				END
			END
			~AddXPObject(%MATCH1%,%XP_value%)~
			REPLACE_EVALUATE ~ChangeStat(\(.*\),XP,\([1-9][0-9]*\),ADD)~ BEGIN
				SET "XP_value" = "%MATCH2%"
				PATCH_IF ("%XP_value%" > 0) BEGIN
					SET XP_value = ("%XP_value%" * "%value%" / 100)
					PATCH_IF ("%XP_value%" < 1) BEGIN
						SET XP_value = 1
					END
					PATCH_PRINT ~Patching %SOURCE_FILE%: %MATCH2% => %XP_value%~
				END
			END
			~ChangeStat(%MATCH1%,XP,%XP_value%,ADD)~
			REPLACE_TEXTUALLY ~\(Allegiance(.*,\)ANYONE)~ ~\10)~//workaround for weidu compiler bug
		END
	BUT_ONLY
END

COPY_EXISTING_REGEXP GLOB ~.+\.SPL~ ~override~
	READ_LONG 0x64 "abil_off" ELSE 0
	READ_SHORT 0x68 "abil_num" ELSE 0
	READ_LONG 0x6a "fx_off" ELSE 0
	FOR (index = 0 ; index < abil_num ; index = index + 1) BEGIN
		READ_SHORT ("%abil_off%" + 0x1e + (0x28 * "%index%")) "abil_fx_num"
		READ_SHORT ("%abil_off%" + 0x20 + (0x28 * "%index%")) "abil_fx_idx"
		FOR (index2 = 0 ; index2 < abil_fx_num ; index2 = index2 + 1) BEGIN
			SET "offset" = ("%fx_off%" + (0x30 * ("%abil_fx_idx%" + "%index2%")))
			READ_SHORT "%offset%" "opcode"
			PATCH_IF ("%opcode%" = 104) BEGIN //XP bonus
				READ_LONG ("%offset%" + 0x4) "XP_value" //Value
				READ_LONG ("%offset%" + 0x8) "XP_type" //Modifier type
				PATCH_IF ((XP_value > 0) AND (XP_type = 0)) BEGIN
					SET print = "%XP_value%"
					SET XP_value = ("%XP_value%" * "%value%" / 100)
					PATCH_IF ("%XP_value%" < 1) BEGIN
						SET XP_value = 1
					END
					WRITE_LONG ("%offset%" + 0x4) "%XP_value%"
					PATCH_PRINT ~Patching %SOURCE_FILE%: %print% => %XP_value%~
				END
			END
		END
	END
	READ_SHORT 0x70 "fx_num" ELSE 0
	FOR (index3 = 0 ; index3 < fx_num ; index3 = index3 + 1) BEGIN
		SET "offset" = ("%fx_off%" + (0x30 * "%index3%"))
		READ_SHORT "%offset%" "opcode"
		PATCH_IF ("%opcode%" = 104) BEGIN //XP bonus
			READ_LONG ("%offset%" + 0x4) "XP_value" //Value
			READ_LONG ("%offset%" + 0x8) "XP_type" //Modifier type
			PATCH_IF ((XP_value > 0) AND (XP_type = 0)) BEGIN
				SET print = "%XP_value%"
				SET XP_value = ("%XP_value%" * "%value%" / 100)
				PATCH_IF ("%XP_value%" < 1) BEGIN
					SET XP_value = 1
				END
				WRITE_LONG ("%offset%" + 0x4) "%XP_value%"
				PATCH_PRINT ~Patching %SOURCE_FILE%: %print% => %XP_value%~
			END
		END
	END
BUT_ONLY

COPY_EXISTING_REGEXP GLOB ~.+\.ITM~ ~override~
	READ_LONG 0x64 "abil_off" ELSE 0
	READ_SHORT 0x68 "abil_num" ELSE 0
	READ_LONG 0x6a "fx_off" ELSE 0
	FOR (index = 0 ; index < abil_num ; index = index + 1) BEGIN
		READ_SHORT ("%abil_off%" + 0x1e + (0x38 * "%index%")) "abil_fx_num"
		READ_SHORT ("%abil_off%" + 0x20 + (0x38 * "%index%")) "abil_fx_idx"
		FOR (index2 = 0 ; index2 < abil_fx_num ; index2 = index2 + 1) BEGIN
			SET "offset" = ("%fx_off%" + (0x30 * ("%abil_fx_idx%" + "%index2%")))
			READ_SHORT "%offset%" "opcode"
			PATCH_IF ("%opcode%" = 104) BEGIN //XP bonus
				READ_LONG ("%offset%" + 0x4) "XP_value" //Value
				READ_LONG ("%offset%" + 0x8) "XP_type" //Modifier type
				PATCH_IF ((XP_value > 0) AND (XP_type = 0)) BEGIN
					SET print = "%XP_value%"
					SET XP_value = ("%XP_value%" * "%value%" / 100)
					PATCH_IF ("%XP_value%" < 1) BEGIN
						SET XP_value = 1
					END
					WRITE_LONG ("%offset%" + 0x4) "%XP_value%"
					PATCH_PRINT ~Patching %SOURCE_FILE%: %print% => %XP_value%~
				END
			END
		END
	END
	READ_SHORT 0x70 "fx_num" ELSE 0
	FOR (index3 = 0 ; index3 < fx_num ; index3 = index3 + 1) BEGIN
		SET "offset" = ("%fx_off%" + (0x30 * "%index3%"))
		READ_SHORT "%offset%" "opcode"
		PATCH_IF ("%opcode%" = 104) BEGIN //XP bonus
			READ_LONG ("%offset%" + 0x4) "XP_value" //Value
			READ_LONG ("%offset%" + 0x8) "XP_type" //Modifier type
			PATCH_IF ((XP_value > 0) AND (XP_type = 0)) BEGIN
				SET print = "%XP_value%"
				SET XP_value = ("%XP_value%" * "%value%" / 100)
				PATCH_IF ("%XP_value%" < 1) BEGIN
					SET XP_value = 1
				END
				WRITE_LONG ("%offset%" + 0x4) "%XP_value%"
				PATCH_PRINT ~Patching %SOURCE_FILE%: %print% => %XP_value%~
			END
		END
	END
BUT_ONLY

COPY_EXISTING_REGEXP GLOB ~.+\.EFF~ ~override~
	READ_LONG 0x10 "opcode"
	PATCH_IF ("%opcode%" = 104) BEGIN //XP bonus
		READ_LONG 0x1c "XP_value" //Value
		READ_LONG 0x20 "XP_type" //Modifier type
		PATCH_IF ((XP_value > 0) AND (XP_type = 0)) BEGIN
			SET print = "%XP_value%"
			SET XP_value = ("%XP_value%" * "%value%" / 100)
			PATCH_IF ("%XP_value%" < 1) BEGIN
				SET XP_value = 1
			END
			WRITE_LONG 0x4 "%XP_value%"
			PATCH_PRINT ~Patching %SOURCE_FILE%: %print% => %XP_value%~
		END
	END
BUT_ONLY

/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////                                                  \\\\\
///// Party XP for quests distributed individually     \\\\\
/////                                                  \\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\

BEGIN ~Party XP for quests distributed individually~
//DESIGNATED 9
REQUIRE_PREDICATE GAME_IS ~soa tob tutu tutu_totsc bgt ca iwd_in_bg2 bgee bg2ee iwdee eet~ ~This component is not compatible with your game.~

COPY_EXISTING ~XPLIST.2da~ ~override~
	COUNT_2DA_COLS "cntcol"
	COUNT_2DA_ROWS "%cntcol%" "cntrows"
	FOR (cnt = 0; cnt < "%cntrows%"; cnt = cnt + 1) BEGIN
		READ_2DA_ENTRY cnt 0 "%cntcol%" "name"
		PATCH_PRINT ~Analysing '%name%' XPLIST.2da row~
		FOR (cnt2 = 2; cnt2 < "%cntcol%"; cnt2 = cnt2 + 1) BEGIN
			READ_2DA_ENTRY cnt cnt2 "%cntcol%" "XP_value"
			PATCH_IF NOT (IS_AN_INT %XP_value%) BEGIN
				SPRINT print "%XP_value%"
				INNER_PATCH_SAVE ~XP_value~ ~%XP_value%~ BEGIN
					REPLACE_TEXTUALLY ~P_~ ~~
				END
				PATCH_IF ("%XP_value%" > 0) BEGIN
					SET XP_value = ("%XP_value%" / 6)
					PATCH_IF ("%XP_value%" < 1) BEGIN
						SET XP_value = 1
					END
					SET_2DA_ENTRY cnt cnt2 cntcol ~%XP_value%~
					PATCH_PRINT ~Patching XPLIST.2da (row%cnt%, col%cnt2%): %print% => %XP_value%~
				END
			END
		END
	END
	PRETTY_PRINT_2DA
BUT_ONLY

ACTION_FOR_EACH ext IN BCS DLG BEGIN
	COPY_EXISTING_REGEXP GLOB ~.+\.%ext%~ ~override~
		DECOMPILE_AND_PATCH BEGIN
			REPLACE_EVALUATE ~AddexperienceParty(\([1-9][0-9]*\))~ BEGIN
				SET "XP_value" = "%MATCH1%"
				PATCH_IF ("%XP_value%" > 0) BEGIN
					SET XP_value = ("%XP_value%" / 6)
					PATCH_IF ("%XP_value%" < 1) BEGIN
						SET XP_value = 1
					END
					PATCH_PRINT ~Patching %SOURCE_FILE%: %MATCH1% => %XP_value% (for Player1-6)~
				END
			END
			~AddXPObject(Player1,%XP_value%)
    AddXPObject(Player2,%XP_value%)
    AddXPObject(Player3,%XP_value%)
    AddXPObject(Player4,%XP_value%)
    AddXPObject(Player5,%XP_value%)
    AddXPObject(Player6,%XP_value%)~
			REPLACE_TEXTUALLY ~\(Allegiance(.*,\)ANYONE)~ ~\10)~//workaround for weidu compiler bug
		END
	BUT_ONLY
END

/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////                                                  \\\\\
///// 3E Thief Sneak Attack                            \\\\\
/////                                                  \\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\

BEGIN ~3E Thief Sneak Attack~
//DESIGNATED 10
REQUIRE_PREDICATE GAME_IS ~eet bg2ee~ ~This component is not compatible with your game.~

LOAD_TRA ~EET_Tweaks/lang/%LANGUAGE%/10.tra~

ACTION_IF (FILE_EXISTS ~%USER_DIRECTORY%/Baldur.ini~) BEGIN
	COPY ~%USER_DIRECTORY%/Baldur.ini~ ~%USER_DIRECTORY%~
		COUNT_REGEXP_INSTANCES ~'3E Thief Sneak Attack'~ num_matches
		PATCH_IF (num_matches > 0) BEGIN
			REPLACE_TEXTUALLY ~\('3E Thief Sneak Attack',[ 	]+\)'.'~ ~\1'1'~
		END ELSE BEGIN
			REPLACE_TEXTUALLY ~INSERT INTO options ROWS (~ ~INSERT INTO options ROWS (
	'Game Options',	'3E Thief Sneak Attack',	'1',~
		END
	BUT_ONLY
END ELSE BEGIN
<<<<<<<< EET_Tweaks-inlined/10/Baldur.ini
CREATE TABLE options (
	section string,
	name string,
	value string
);
INSERT INTO options ROWS (
	'Game Options',	'3E Thief Sneak Attack',	'1'
);
>>>>>>>>
	COPY ~EET_Tweaks-inlined/10/Baldur.ini~ ~%USER_DIRECTORY%/Baldur.ini~ EVALUATE_BUFFER
END

COPY ~EET_Tweaks/10/SNEAKATT.2DA~ ~override~
	~EET_Tweaks/10/CRIPPSTR.2DA~ ~override~
	~EET_Tweaks/10/BACKSTAB.SPL~ ~override~

STRING_SET ~3042~ @0 //change "The backstab seems to have failed." to "Successful Sneak Attack"
//STRING_SET ~~ @1 //failed sneak attack message
STRING_SET ~9561~ @2 //Thief kit description
STRING_SET ~25211~ @3 //Stalker kit description
STRING_SET ~25213~ @4 //Assassin kit description
STRING_SET ~25216~ @5 //Swashbuckler kit description
STRING_SET ~74298~ @6 //Shadowdancer kit description

//10013 //Your weapon is unsuitable for backstab.
//12128 //Backstab Damage
//16471 //Backstab Double Damage
//16472 //Backstab Triple Damage
//16473 //Backstab Quadruple Damage
//16474 //Backstab Quintuple Damage
//16475 //Backstab Sextuple Damage
//74094 //Backstab Septuple Damage
//74095 //Backstab Octuple Damage
//74096 //Backstab Nonuple Damage

/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////                                                  \\\\\
///// Adjust FPS and fix audio skipping in cutscenes   \\\\\
/////                                                  \\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\

BEGIN ~Adjust FPS and fix audio skipping in cutscenes~
//DESIGNATED 11
REQUIRE_PREDICATE GAME_IS ~soa tob tutu tutu_totsc bgt ca iwd_in_bg2 bgee bg2ee iwdee eet~ ~This component is not compatible with your game.~

OUTER_SET valid_answer = 0
OUTER_SET button = 0
OUTER_SPRINT value ~dummy~

OUTER_WHILE (valid_answer = 0) BEGIN
	ACTION_IF ("%ARGS_component%" = "%COMPONENT_NUMBER%") BEGIN
		OUTER_SET value = "%ARGS_value%"
		OUTER_SET valid_answer = 1
	END ELSE ACTION_IF ("%button%" = 1) BEGIN //60
		OUTER_SET value = 60
		OUTER_SET valid_answer = 1
	END ELSE ACTION_IF ("%button%" = 2) BEGIN //45
		OUTER_SET value = 45
		OUTER_SET valid_answer = 1
	END ELSE ACTION_IF ("%button%" = 3) BEGIN //Custom value
		OUTER_WHILE NOT (IS_AN_INT %value%) OR (%value% <= 30) OR (%value% > 60) BEGIN
			PRINT ~Type in the FPS vakue (30+ up to 60):~
			ACTION_READLN ~value~
		END
		OUTER_SET valid_answer = 1
	END ELSE BEGIN
		PRINT ~Choose Maximum Frame Rate:
 1] 60 FPS
 2] 45 FPS
 3] Custom value~//%~
		ACTION_READLN ~button~
		ACTION_IF NOT (IS_AN_INT %button%) BEGIN
			OUTER_SET button = 0
		END
	END
END

ACTION_IF (FILE_EXISTS ~%USER_DIRECTORY%/Baldur.ini~) BEGIN
	COPY ~%USER_DIRECTORY%/Baldur.ini~ ~%USER_DIRECTORY%~
		PATCH_IF ENGINE_IS ~bgee bg2ee iwdee~ BEGIN
			COUNT_REGEXP_INSTANCES ~'Maximum Frame Rate'~ num_matches
			PATCH_IF (num_matches > 0) BEGIN
				REPLACE_TEXTUALLY ~\('Maximum Frame Rate',[ 	]+\)'[0-9]+'~ ~\1'%value%'~
			END ELSE BEGIN
				REPLACE_TEXTUALLY ~INSERT INTO options ROWS (~ ~INSERT INTO options ROWS (
		'Program Options',	'Maximum Frame Rate',	'%value%',~
			END
		END ELSE BEGIN
			//patch ini file for non EE games
		END
	BUT_ONLY
END ELSE ACTION_IF ENGINE_IS ~bgee bg2ee iwdee~ BEGIN
<<<<<<<< EET_Tweaks-inlined/11/Baldur.ini
CREATE TABLE options (
	section string,
	name string,
	value string
);
INSERT INTO options ROWS (
	'Program Options',	'Maximum Frame Rate',	'%value%'
);
>>>>>>>>
	COPY ~EET_Tweaks-inlined/11/Baldur.ini~ ~%USER_DIRECTORY%/Baldur.ini~ EVALUATE_BUFFER
END ELSE BEGIN
	//create ini file for non EE games
END

//additional delay. Unused, but can be set for languages that have many problems with cutting sounds even in 30 FPS because they are longer than English ones
/*ACTION_IF ("%LANGUAGE%" STRING_EQUAL_CASE ~pl_PL~) BEGIN
	OUTER_SET lang_val = 10
END*/

//Below code will update timers depending on the chosen FPS and should fix most of the issues for English audio
//updates only Wait and SmallWait 1 line below DisplayStringX actions, so it shouldn't slow the game in other places
COPY_EXISTING_REGEXP GLOB ~^.+\.BCS$~ ~override~
	DECOMPILE_AND_PATCH BEGIN
		REPLACE_EVALUATE ~\(DisplayString.+[%newline%]+\)\(.*\)Wait(\([0-9]+\))\(.*\)~ BEGIN
			SET time = "%MATCH3%"
			SPRINT new_MATCH2 "%MATCH2%"
			PATCH_IF "%MATCH2%" STRING_MATCHES_REGEXP ".*Small$" = 0 BEGIN
				SET time = ("%time%" * "%value%" / 30)
				/*PATCH_IF VARIABLE_IS_SET "%lang_val%" BEGIN
					SET lang_add = ("%time%" / "%lang_val%")
					SET time = ("%time%" + "%lang_add%")
				END*/
				INNER_PATCH_SAVE ~new_MATCH2~ ~%new_MATCH2%~ BEGIN
					REPLACE_TEXTUALLY ~Small$~ ~~
				END
			END ELSE BEGIN
				SET time = ("%time%" * 15 * "%value%" / 30)
				/*PATCH_IF VARIABLE_IS_SET "%lang_val%" BEGIN
					SET lang_add = ("%time%" / "%lang_val%")
					SET time = ("%time%" + "%lang_add%")
				END*/
			END
			PATCH_IF ("%time%" < 1) BEGIN
				SET time = 1
			END
			PATCH_PRINT ~Patching %SOURCE_FILE%: %MATCH1%%MATCH2%Wait(%MATCH3%)%MATCH4% => %new_MATCH2%SmallWait(%time%)%MATCH4%~
		END
		~%MATCH1%%new_MATCH2%SmallWait(%time%)%MATCH4%~
		REPLACE_TEXTUALLY ~\(Allegiance(.*,\)ANYONE)~ ~\10)~//workaround for weidu compiler bug
	END
BUT_ONLY

/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////                                                  \\\\\
///// More bandit scalps                               \\\\\
/////                                                  \\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\

BEGIN ~More bandit scalps~
//DESIGNATED 12
REQUIRE_PREDICATE GAME_IS ~bgee eet~ ~This component is not compatible with your game.~
FORBID_COMPONENT ~Setup-BGTTweak.tp2~ 1400 ~Component already installed via BGT Tweaks~

ACTION_FOR_EACH cre IN britik credus hakt raiken taugos tersus teven vax venkt zal BEGIN
	COPY_EXISTING ~%cre%.cre~ ~override~
		READ_LONG 0x2b8 itemslot_off
		READ_LONG 0x2bc item_off
		READ_LONG 0x2c0 item_num
		SET item_found = 0
		FOR (i = 0; i < %item_num%; i +=1) BEGIN
			READ_ASCII (%item_off% + %i% * 0x14) item_name
			PATCH_IF ("%item_name%" STRING_EQUAL_CASE "MISC86") BEGIN
				FOR (j = 0; j < 37; j += 1) BEGIN
					READ_SHORT (%itemslot_off% + %j% * 0x2) itemslot_idx
					PATCH_IF %itemslot_idx% = %i% BEGIN
						SET item_found = 1
					END
				END
			END
		END
		PATCH_IF item_found = 0 BEGIN
			ADD_CRE_ITEM ~MISC86~ #0 #0 #0 ~UNSTEALABLE~ ~INV~
		END
	BUT_ONLY
END

/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////                                                  \\\\\
///// Put Sword of Chaos +2 in Sarevok's inventory     \\\\\
/////                                                  \\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\

BEGIN ~Put Sword of Chaos +2 in Sarevok's inventory~
//DESIGNATED 13
REQUIRE_PREDICATE GAME_IS ~eet~ ~This component is not compatible with your game.~
FORBID_COMPONENT ~Setup-BGTTweak.tp2~ 2700 ~Component already installed via BGT Tweaks~

//check if Sarevok already has the sword
COPY_EXISTING ~sarevo.cre~ ~override/sarevo.cre~
	READ_LONG 0x2b8 itemslot_off
	READ_LONG 0x2bc item_off
	READ_LONG 0x2c0 item_num
	SET item_found = 0
	FOR (i = 0; i < %item_num%; i +=1) BEGIN
		READ_ASCII (%item_off% + %i% * 0x14) item_name
		PATCH_IF ("%item_name%" STRING_EQUAL_CASE "SW2H16") BEGIN
			FOR (j = 0; j < 37; j += 1) BEGIN
				READ_SHORT (%itemslot_off% + %j% * 0x2) itemslot_idx
				PATCH_IF %itemslot_idx% = %i% BEGIN
					SET item_found = 1
				END
			END
		END
	END
	PATCH_IF item_found = 0 BEGIN
		ADD_CRE_ITEM ~SW2H16~ #0 #0 #0 ~UNSTEALABLE~ ~INV~
	END
BUT_ONLY

/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////                                                  \\\\\
///// Protagonist can die                              \\\\\
/////                                                  \\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\

BEGIN ~Protagonist can die~
//DESIGNATED 14
REQUIRE_PREDICATE GAME_IS ~bgee bg2ee iwdee eet~ ~This component is not compatible with your game.~

COPY_EXISTING_REGEXP GLOB ~^.+\.are$~ ~override~
	READ_BYTE 0x14 "flags"
	WRITE_BYTE 0x14 ("%flags%" BOR 0b00010000)
BUT_ONLY

//Ironman Mode detection scrapped for now
/*ACTION_IF MOD_IS_INSTALLED ~EET_Tweaks/EET_Tweaks.tp2~ ~15~ BEGIN
	OUTER_SPRINT save_eval ~SaveGame(0)~
END ELSE BEGIN
	OUTER_SPRINT save_eval ~~
END*/

<<<<<<<< EET_Tweaks-inlined/14/baldur-et.baf
IF
  NumInPartyAlive(0)
THEN
  RESPONSE #100
    //%save_eval%
    StartMovie("DEATHAND")
    GoToStartScreen()
END
>>>>>>>>

ACTION_FOR_EACH script IN BALDUR BALDUR25 BEGIN
	ACTION_IF FILE_EXISTS_IN_GAME ~%script%.BCS~ BEGIN
		EXTEND_TOP ~%script%.BCS~ ~EET_Tweaks-inlined/14/baldur-et.baf~ EVALUATE_BUFFER
	END
END

/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////                                                  \\\\\
///// IWD:EE Bard Songs                                \\\\\
/////                                                  \\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\

//BEGIN ~IWD:EE Bard Songs~
//DESIGNATED 
//REQUIRE_PREDICATE GAME_IS ~eet bg2ee~ ~This component is not compatible with your game.~

BEGIN ~Make all traps persistent~
GROUP ~Optional Tweaks~

COPY_EXISTING_REGEXP GLOB ~.*\.are~ ~override~
  READ_SHORT 0x5a "#triggers"
  READ_LONG 0x5c "triggers_offset"
  READ_LONG 0x70 "containers_offset"
  READ_SHORT 0x74 "#containers"
  SET "#read" = "0"
  FOR (i = %#triggers% ; i ; --i) BEGIN
    READ_SHORT (%triggers_offset% + 0x20 + (%#read% * 0xc4)) "trigger_type"
	READ_BYTE (%triggers_offset% + 0x60 + (%#read% * 0xc4)) "flags"
	READ_SHORT (%triggers_offset% + 0x6c + (%#read% * 0xc4)) "admiral_ackbar"	
	  PATCH_IF (%trigger_type% = 0 AND %admiral_ackbar% = 1 AND (%flags% BOR 0b00001010) != 0b00001000) THEN BEGIN
		WRITE_BYTE (%triggers_offset% + 0x60 + (%#read% * 0xc4)) (%flags% BOR 0b00000010)
		END
	  SET "#read" += "1"
	  END
  SET "#read" = "0"
  FOR (i = %#containers% ; i ; --i) BEGIN
    READ_BYTE (%containers_offset% + 0x28 + (%#read% * 0xc0)) "flags"
	READ_SHORT (%containers_offset% + 0x30 + (%#read% * 0xc0)) "admiral_ackbar"
	  PATCH_IF (%admiral_ackbar% = 1 AND (%flags% BOR 0b00001000) != 0b00001000) THEN BEGIN
	    WRITE_BYTE (%containers_offset% + 0x28 + (%#read% * 0xc0)) (%flags% BOR 0b00001000)
		END
	  SET "#read" += "1"
	  END
	  BUT_ONLY

BEGIN ~Increase detection and removal difficulty by +5~
SUBCOMPONENT ~Make traps more difficult~
GROUP ~Optional Tweaks~

COPY_EXISTING_REGEXP GLOB ~.*\.are~ ~override~
  READ_SHORT 0x5a "#triggers"
  READ_LONG 0x5c "triggers_offset"
  READ_LONG 0x70 "containers_offset"
  READ_SHORT 0x74 "#containers"
  SET "#read" = "0"
  FOR (i = %#triggers% ; i ; --i) BEGIN
    READ_SHORT (%triggers_offset% + 0x20 + (%#read% * 0xc4)) "trigger_type"
	READ_SHORT (%triggers_offset% + 0x68 + (%#read% * 0xc4)) "trap_detection"
	READ_SHORT (%triggers_offset% + 0x6a + (%#read% * 0xc4)) "trap_removal"
	READ_SHORT (%triggers_offset% + 0x6c + (%#read% * 0xc4)) "admiral_ackbar"	
	  PATCH_IF (%trigger_type% = 0 AND %admiral_ackbar% = 1 AND %trap_detection% > 0 AND %trap_removal% > 0) THEN BEGIN
		WRITE_SHORT (%triggers_offset% + 0x68 + (%#read% * 0xc4)) (%trap_detection% + 5)
		WRITE_SHORT (%triggers_offset% + 0x6a + (%#read% * 0xc4)) (%trap_removal% + 5)
		END
	  SET "#read" += "1"
	  END
  SET "#read" = "0"
  FOR (i = %#containers% ; i ; --i) BEGIN
	READ_SHORT (%containers_offset% + 0x2c + (%#read% * 0xc0)) "trap_detection"
	READ_SHORT (%containers_offset% + 0x2e + (%#read% * 0xc0)) "trap_removal"
	READ_SHORT (%containers_offset% + 0x30 + (%#read% * 0xc0)) "admiral_ackbar"
	  PATCH_IF (%admiral_ackbar% = 1 AND %trap_detection% > 0 AND %trap_removal% > 0) THEN BEGIN
	    WRITE_SHORT (%containers_offset% + 0x2c + (%#read% * 0xc0)) (%trap_detection% + 5)
		WRITE_SHORT (%containers_offset% + 0x2e + (%#read% * 0xc0)) (%trap_removal% + 5)
		END
	  SET "#read" += "1"
	  END
	  BUT_ONLY

BEGIN ~Increase lock difficulty by +5~
SUBCOMPONENT ~Make locks more difficult~
GROUP ~Optional Tweaks~

COPY_EXISTING_REGEXP GLOB ~.*\.are~ ~override~
  READ_LONG 0xa4 "#doors"
  READ_LONG 0xa8 "doors_offset"
  READ_LONG 0x70 "containers_offset"
  READ_SHORT 0x74 "#containers"
  SET "#read" = "0"
  FOR (i = %#doors% ; i ; --i) BEGIN
    READ_LONG (%doors_offset% + 0x28 + (%#read% * 0xc8)) "flags"
	READ_LONG (%doors_offset% + 0x8c + (%#read% * 0xc8)) "difficulty"	
	  PATCH_IF ((%flags% BOR 0b10100010) = 0b10100010 AND %difficulty% > 0) THEN BEGIN
		WRITE_LONG (%doors_offset% + 0x8c + (%#read% * 0xc8)) (%difficulty% + 5)
		END
	  SET "#read" += "1"
	  END
  SET "#read" = "0"
  FOR (i = %#containers% ; i ; --i) BEGIN
	READ_SHORT (%containers_offset% + 0x26 + (%#read% * 0xc0)) "difficulty"
	READ_LONG (%containers_offset% + 0x28 + (%#read% * 0xc0)) "flags"
	  PATCH_IF ((%flags% BAND 0b00000001) = 0b00000001 AND %difficulty% > 0) THEN BEGIN
	    WRITE_SHORT (%containers_offset% + 0x26 + (%#read% * 0xc0)) (%difficulty% + 5)
		END
	  SET "#read" += "1"
	  END
	  BUT_ONLY
